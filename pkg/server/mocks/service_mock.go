// Code generated by MockGen. DO NOT EDIT.
// Source: model.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	service "balance/pkg/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBalancer is a mock of Balancer interface.
type MockBalancer struct {
	ctrl     *gomock.Controller
	recorder *MockBalancerMockRecorder
}

// MockBalancerMockRecorder is the mock recorder for MockBalancer.
type MockBalancerMockRecorder struct {
	mock *MockBalancer
}

// NewMockBalancer creates a new mock instance.
func NewMockBalancer(ctrl *gomock.Controller) *MockBalancer {
	mock := &MockBalancer{ctrl: ctrl}
	mock.recorder = &MockBalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalancer) EXPECT() *MockBalancerMockRecorder {
	return m.recorder
}

// ChangeBalance mocks base method.
func (m *MockBalancer) ChangeBalance(id, amount int64) (*service.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBalance", id, amount)
	ret0, _ := ret[0].(*service.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBalance indicates an expected call of ChangeBalance.
func (mr *MockBalancerMockRecorder) ChangeBalance(id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBalance", reflect.TypeOf((*MockBalancer)(nil).ChangeBalance), id, amount)
}

// GetBalance mocks base method.
func (m *MockBalancer) GetBalance(id int64, currency string) (*service.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", id, currency)
	ret0, _ := ret[0].(*service.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBalancerMockRecorder) GetBalance(id, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalancer)(nil).GetBalance), id, currency)
}

// GetHistory mocks base method.
func (m *MockBalancer) GetHistory(id int64) ([]*service.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", id)
	ret0, _ := ret[0].([]*service.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockBalancerMockRecorder) GetHistory(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockBalancer)(nil).GetHistory), id)
}

// Transfer mocks base method.
func (m *MockBalancer) Transfer(senderId, recipientId, amount int64) (*service.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", senderId, recipientId, amount)
	ret0, _ := ret[0].(*service.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockBalancerMockRecorder) Transfer(senderId, recipientId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockBalancer)(nil).Transfer), senderId, recipientId, amount)
}
